package GeDL.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Comparison_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Condition_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new DataStream_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DataStreamList_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new DateTime_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new DetectionExtent_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new DetectionRule_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new DetectionTime_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Distance_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Event_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new EventDefinition_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new EventParameter_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Feature_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new LogicalOperator_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new Notification_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new PayloadPhenomenon_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new Phenomenon_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new SpatialGranulariy_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new Time_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new TimeWindow_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new Value_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new EventParameter_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new Expression_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new PayloadPhenomenon_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22a3L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22a5L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22a8L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22acL), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22b9L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22c2L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfbed05L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfbed0cL), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22c9L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb2345L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb2348L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x24b3732dd914c0f9L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22c7L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x46a1d550fcaae805L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x61e69d1f3f9fa6d1L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x24b3732dd9166feeL), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x61e69d1f3f9fb976L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb234eL), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb2351L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x61e69d1f3f9a517eL), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x46a1d550fc9ff355L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x24b3732dd914c0f9L), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb234dL), MetaIdFactory.conceptId(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x24b3732dd9166feeL)).seal();
}
