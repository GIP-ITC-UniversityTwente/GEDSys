package GeDL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Comparison;
  private ConceptPresentation props_Condition;
  private ConceptPresentation props_DataStream;
  private ConceptPresentation props_DataStreamList;
  private ConceptPresentation props_DateTime;
  private ConceptPresentation props_DetectionExtent;
  private ConceptPresentation props_DetectionRule;
  private ConceptPresentation props_DetectionTime;
  private ConceptPresentation props_Distance;
  private ConceptPresentation props_Event;
  private ConceptPresentation props_EventDefinition;
  private ConceptPresentation props_Expression;
  private ConceptPresentation props_Feature;
  private ConceptPresentation props_SpatialGranulariy;
  private ConceptPresentation props_Time;
  private ConceptPresentation props_TimeInstance;
  private ConceptPresentation props_TimeType;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Comparison:
        if (props_Comparison == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Comparison");
          props_Comparison = cpb.create();
        }
        return props_Comparison;
      case LanguageConceptSwitch.Condition:
        if (props_Condition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("condition");
          props_Condition = cpb.create();
        }
        return props_Condition;
      case LanguageConceptSwitch.DataStream:
        if (props_DataStream == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("data stream");
          cpb.rawPresentation("DataStream");
          props_DataStream = cpb.create();
        }
        return props_DataStream;
      case LanguageConceptSwitch.DataStreamList:
        if (props_DataStreamList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DataStreamList = cpb.create();
        }
        return props_DataStreamList;
      case LanguageConceptSwitch.DateTime:
        if (props_DateTime == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("date time");
          props_DateTime = cpb.create();
        }
        return props_DateTime;
      case LanguageConceptSwitch.DetectionExtent:
        if (props_DetectionExtent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("detection extent");
          props_DetectionExtent = cpb.create();
        }
        return props_DetectionExtent;
      case LanguageConceptSwitch.DetectionRule:
        if (props_DetectionRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("event rule");
          props_DetectionRule = cpb.create();
        }
        return props_DetectionRule;
      case LanguageConceptSwitch.DetectionTime:
        if (props_DetectionTime == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("detection time");
          props_DetectionTime = cpb.create();
        }
        return props_DetectionTime;
      case LanguageConceptSwitch.Distance:
        if (props_Distance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("distance");
          props_Distance = cpb.create();
        }
        return props_Distance;
      case LanguageConceptSwitch.Event:
        if (props_Event == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("geographic event");
          cpb.presentationByName();
          props_Event = cpb.create();
        }
        return props_Event;
      case LanguageConceptSwitch.EventDefinition:
        if (props_EventDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("event definition");
          props_EventDefinition = cpb.create();
        }
        return props_EventDefinition;
      case LanguageConceptSwitch.Expression:
        if (props_Expression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Expression");
          props_Expression = cpb.create();
        }
        return props_Expression;
      case LanguageConceptSwitch.Feature:
        if (props_Feature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("feature");
          props_Feature = cpb.create();
        }
        return props_Feature;
      case LanguageConceptSwitch.SpatialGranulariy:
        if (props_SpatialGranulariy == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("granularity");
          props_SpatialGranulariy = cpb.create();
        }
        return props_SpatialGranulariy;
      case LanguageConceptSwitch.Time:
        if (props_Time == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("time");
          props_Time = cpb.create();
        }
        return props_Time;
      case LanguageConceptSwitch.TimeInstance:
        if (props_TimeInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("time instance");
          props_TimeInstance = cpb.create();
        }
        return props_TimeInstance;
      case LanguageConceptSwitch.TimeType:
        if (props_TimeType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TimeType = cpb.create();
        }
        return props_TimeType;
    }
    return null;
  }
}
