package GeDL.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class Event_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("@info(name = '");
    tgs.append(SPropertyOperations.getString(ctx.getPrimaryInput(), PROPS.name$MnvL));
    tgs.append("')");
    tgs.newLine();
    // Query: condition
    tgs.appendNode(SLinkOperations.getTarget(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.detectionRules$WVw6), LINKS.condition$HxlH));
    // TIME detection rule

    // For multiple parameters!!!
    Integer countParams = ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.parameters$xFqW)).count();
    tgs.append("count ");
    tgs.append(countParams.toString());


    // Query: projection
    String notificationName = "";
    for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(ctx.getPrimaryInput())))) {
      if (SNodeOperations.isInstanceOf(child, CONCEPTS.Notification$fE)) {
        notificationName = BaseConcept__BehaviorDescriptor.getDetailedPresentation_id22G2W3WJ92t.invoke(child);
      }
    }
    tgs.append("select '");
    tgs.append(notificationName);
    tgs.append("' as Notification,");
    tgs.newLine();
    ctx.getBuffer().area().increaseIndent();
    tgs.increaseIndent();
    tgs.append("map:create(");
    Integer countStream = 1;
    for (SNode param : ListSequence.fromList(SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.parameters$xFqW))) {
      tgs.append("'");
      tgs.append(SPropertyOperations.getString(param, PROPS.parameterName$nSEP));
      tgs.append("',");
      tgs.newLine();
      tgs.indent();
      tgs.append("map:create(");
      tgs.newLine();
      tgs.increaseIndent();
      tgs.indent();
      tgs.append("'observedProperty', ");
      tgs.append("s");
      tgs.append(countStream.toString());
      tgs.append(".observedProperty,");
      tgs.newLine();
      tgs.indent();
      tgs.append("'resultTime', ");
      tgs.append("s");
      tgs.append(countStream.toString());
      tgs.append(".resultTime,");
      tgs.newLine();
      tgs.indent();
      tgs.append("'result', ");
      tgs.append("s");
      tgs.append(countStream.toString());
      tgs.append(".result,");
      tgs.newLine();
      tgs.indent();
      tgs.append("'location', ");
      tgs.append("s");
      tgs.append(countStream.toString());
      tgs.append(".location,");
      tgs.newLine();
      tgs.indent();
      tgs.append(")");
      if (countStream > 1) {
        tgs.append(",");
        tgs.newLine();
      }
      countStream++;
    }
    tgs.append(" ) as observations,");
    tgs.newLine();
    tgs.indent();
    tgs.append("time:currentTimestamp() as detection time");
    tgs.newLine();
    tgs.append("insert into ");
    tgs.append(notificationName);
    tgs.append(";");
    tgs.newLine();
    ctx.getBuffer().area().decreaseIndent();
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty parameterName$nSEP = MetaAdapterFactory.getProperty(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x24b3732dd914c0f9L, 0x650f009a35064e7aL, "parameterName");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink detectionRules$WVw6 = MetaAdapterFactory.getContainmentLink(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb2345L, 0x67f5466a8138b3faL, "detectionRules");
    /*package*/ static final SContainmentLink condition$HxlH = MetaAdapterFactory.getContainmentLink(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfbed05L, 0x562897dc3cfbed08L, "condition");
    /*package*/ static final SContainmentLink parameters$xFqW = MetaAdapterFactory.getContainmentLink(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb2345L, 0x24b3732dd8d8ecefL, "parameters");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Notification$fE = MetaAdapterFactory.getConcept(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x61e69d1f3f9fa6d1L, "GeDL.structure.Notification");
  }
}
