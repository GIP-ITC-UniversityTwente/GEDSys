package GeDL.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class Condition_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    if ((SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.LeftComparison$Ic57) != null) && (SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.RightComparison$DgWG) == null)) {
      tgs.append("from s1=");
      tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.LeftComparison$Ic57), LINKS.expression$mq_y), PROPS.parameterName$nSEP));
      tgs.append("[result ");
      tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.LeftComparison$Ic57), PROPS.ComparisonOperator$JGH7));
      tgs.append(" ");
      tgs.appendNode(SLinkOperations.getTarget(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.LeftComparison$Ic57), LINKS.value$7J_a));
      tgs.append("]");
    } else if ((SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.LeftComparison$Ic57) != null) && (SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.RightComparison$DgWG) != null) && SPropertyOperations.getEnum(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.LogicalOperator$MyzW), PROPS.Operator$E3zl).toString() == "&&") {
      tgs.append("from every s1=");
      tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.LeftComparison$Ic57), LINKS.expression$mq_y), PROPS.parameterName$nSEP));
      tgs.append("[result ");
      tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.LeftComparison$Ic57), PROPS.ComparisonOperator$JGH7));
      tgs.append(" ");
      tgs.appendNode(SLinkOperations.getTarget(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.LeftComparison$Ic57), LINKS.value$7J_a));
      tgs.append("], ");
      tgs.append("s2=");
      tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.RightComparison$DgWG), LINKS.expression$mq_y), PROPS.parameterName$nSEP));
      tgs.append("[result ");
      tgs.append(SPropertyOperations.getString(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.RightComparison$DgWG), PROPS.ComparisonOperator$JGH7));
      tgs.append(" ");
      tgs.appendNode(SLinkOperations.getTarget(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.RightComparison$DgWG), LINKS.value$7J_a));
      tgs.append("]");
      tgs.newLine();
    } else if ((SPropertyOperations.getEnum(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.LogicalOperator$MyzW), PROPS.Operator$E3zl) != null) && SPropertyOperations.getEnum(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.LogicalOperator$MyzW), PROPS.Operator$E3zl).toString() != "&&") {
      tgs.append(">>> \"ERROR: the operator ");
      tgs.append(SPropertyOperations.getEnum(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.LogicalOperator$MyzW), PROPS.Operator$E3zl).toString());
      tgs.append(" is not implemented!\"");
      tgs.newLine();
    } else if ((SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.LeftComparison$Ic57) == null) && (SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.RightComparison$DgWG) == null)) {
      tgs.append(">>> \"ERROR: No condtions was specified in detection rules!\"");
      tgs.newLine();
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink RightComparison$DgWG = MetaAdapterFactory.getContainmentLink(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22a5L, 0x46a1d550fca40524L, "RightComparison");
    /*package*/ static final SContainmentLink LeftComparison$Ic57 = MetaAdapterFactory.getContainmentLink(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22a5L, 0x46a1d550fca3ffc0L, "LeftComparison");
    /*package*/ static final SContainmentLink expression$mq_y = MetaAdapterFactory.getContainmentLink(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22a3L, 0x650f009a34c69db8L, "expression");
    /*package*/ static final SContainmentLink value$7J_a = MetaAdapterFactory.getContainmentLink(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22a3L, 0x46a1d550fc9ff267L, "value");
    /*package*/ static final SContainmentLink LogicalOperator$MyzW = MetaAdapterFactory.getContainmentLink(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22a5L, 0x46a1d550fcaadec3L, "LogicalOperator");
  }

  private static final class PROPS {
    /*package*/ static final SProperty parameterName$nSEP = MetaAdapterFactory.getProperty(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x24b3732dd914c0f9L, 0x650f009a35064e7aL, "parameterName");
    /*package*/ static final SProperty ComparisonOperator$JGH7 = MetaAdapterFactory.getProperty(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x562897dc3cfb22a3L, 0x61e69d1f3f9dee76L, "ComparisonOperator");
    /*package*/ static final SProperty Operator$E3zl = MetaAdapterFactory.getProperty(0x35b540ea51fc45c2L, 0x8fb01d48ca99c3dbL, 0x46a1d550fcaae805L, 0x46a1d550fcaaeb12L, "Operator");
  }
}
